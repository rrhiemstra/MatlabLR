function lrsplinesurface_tikz(lrsplinesurface, file)

% initialize
[filepath, filename, ext] = fileparts(file);
check_filename_extension(ext); % check that input is a .tex file
write_preamble(filepath); % write the new commands to a file: preamble.tex

% write data to .dat file
datafile = strcat(filepath,'/',filename, '.dat');
fileID = fopen(datafile,'w');
write_data_to_texfile(fileID, lrsplinesurface);
fclose(fileID);

% write main \tikz file
fileID = fopen(file,'w');

% create document, load preamble and data
fprintf(fileID,'%s\n\n','\documentclass[crop=true,a4paper]{standalone}');
fprintf(fileID,'%s\n\n','\input{preamble.tex}'); % include preamble
fprintf(fileID,'%s%s%s\n\n','\input{',filename,'.dat}'); % add data to file

fprintf(fileID,'%s\n %s\n %s\n\n','\def\tkzscale{10.0}',...
    '\def\dirdata{../data}',...
    '\tikzexternaldisable');

% write main user-defined parameters
write_userinput_to_tikzfile(fileID);

% begin new document
fprintf(fileID,'%s\n\n','\begin{document}');

% initialize tikz picture settings
fprintf(fileID,'%s\n %s\n %s\n %s\n\n\n',...
                '\begin{tikzpicture}[scale=\tkzscale, ',...
                'every node/.style={font=\tikzfontsize},',...
                'nonactive/.style={loosely dotted},',...
                'x=\sizeX,y=\sizeY]');
            
fprintf(fileID,'%s\n%s\n\n',...
    '% define active area',...
    '\clip (\aX-0.05*\bX+0.05*\aX, \aY-0.05*\bY+0.05*\aY) rectangle ( \bX+0.05*\bX-0.05*\aX, \bY+0.05*\bY-0.05*\aY);');          

write_drawing_to_tikzfile(fileID, lrsplinesurface);

% close file
fprintf(fileID,'%s\n','\end{tikzpicture}');
fprintf(fileID,'%s\n','\end{document}');
fclose(fileID);
    
end

% check filename extension
function check_filename_extension(ext)
    if strcmp(ext,'.tex')
       % continue
    else
        error('Filename should have the extension .tex');
    end
end

% write new commands to newcommands.tex
function write_preamble(filepath)
    filename = strcat(filepath, '/preamble.tex');
    if isfile(filename)
        % do nothing
    % if file does not exist create new file with commands
    else
        % open file
        fileID = fopen(filename,'w');
        
        % load packages
        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '%%%%%%%%%%%%%%%%%% load packages %%%%%%%%%%%%%%%%%%%%',...
            '\usepackage{tikz}',...
            '\usepackage{tikzscale}',...
            '\usepackage{standalone} 		% for standalone compilation of tikz graphics',...
            '\usepackage{listofitems}',...
            '\usepackage[utf8]{inputenc} 			% for UTF-8 encoding',...
            '\usepackage[german,english]{babel}',...
            '\usepackage{lmodern} % latin modern fonts - added to resolve visualization issues with fontenc',...
            '\usepackage[intlimits]{amsmath}',...
            '\usepackage{amssymb} ',...
            '\usepackage{amsthm}',...
            '\usepackage{amsfonts,mathrsfs}',...
            '\usepackage{xcolor}');
        
        % load tikz functionality
        fprintf(fileID,'%s\n%s\n%s\n%s\n\n',...
            '%%%%%%%%%%%%%%%%%% tikz %%%%%%%%%%%%%%%%%%%%',...
            '\usetikzlibrary{external,calc,math,shapes,spy,fit}',...
            '\tikzexternalize[optimize command away=\includepdf]',...
            '\tikzsetexternalprefix{tmp/}');
        
        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '%%% Font size in plots and graphics',...
            '\def\pgfplotfontsizetitle{\small}',...
            '\def\pgfplotfontsize{\footnotesize}',...
            '\def\tikzfontsize{\small}',...
            '\def\tikzfontsizesmall{\footnotesize}',...
            '\def\tikzfontsizetiny{\scriptsize}');

        fprintf(fileID,'%s\n%s\n\n',...
            '% create a new list by indexing an existing multidimensional list.',...
            '\newcommand{\itemtolist}[2]{\itemtomacro#1\tmp; \readlist#2\tmp;}');

        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '% sum a list of integers',...
            '\newcommand{\listsumtruncatemacro}[2]{',...
            '\def\s{0}',...
            '\foreachitem \MyLocalMu \in #1{',...
            '	\pgfmathtruncatemacro{\s}{\s+\MyLocalMu}',...
            '}',...
            '\pgfmathsetmacro{#2}{\s}',...
            '}');

        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '% difference between two list entries',...
            '\newcommand{\listdiffmacro}[3]{',...
            '\itemtomacro#1\ua',...
            '\itemtomacro#2\ub',...
            '\pgfmathsetmacro{#3}{\ub - \ua}',...
            '}');
        
        % Command that draws u-knots of a lr-spline
        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '\newcommand{\plotuknot}[5]{',...
            '\draw  [knotline=#5]  (#1,#2) -- (#1-#4*\mudistance+\mudistance,#2);',...
            '\foreach \i in {1,...,#4}',...
            '{',...
            '	\pgfmathparse{#1-(\i-1)*\mudistance} \let\uu\pgfmathresult;',...
            '	\draw  [knotline=#5]  (\uu,#2) -- (\uu,#3);',...
            '}',...
            '\draw  [knotline=#5]  (#1,#3) -- (#1-#4*\mudistance+\mudistance,#3);',...
            '}');

        % Command that draws v-knots of a lr-spline
        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '\newcommand{\plotvknot}[5]{',...
            '\draw  [knotline=#5]  (#2,#1) -- (#2,#1-#4*\mudistance+\mudistance);',...
            '\foreach \i in {1,...,#4}',...
            '{',...
            '	\pgfmathparse{#1-(\i-1)*\mudistance} \let\vv\pgfmathresult;',...
            '	\draw  [knotline=#5]  (#2,\vv) -- (#3,\vv);',...
            '}',...
            '\draw  [knotline=#5]  (#3,#1) -- (#3,#1-#4*\mudistance+\mudistance);',...
            '}');

        % draw all u and v knot lines with multiplicity distance s
        fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
            '\newcommand{\plotknotlines}[4]{',...
            '\listsumtruncatemacro{#2}{\p}',...
            '\listsumtruncatemacro{#4}{\q}',...
            '\pgfmathsetmacro{\m}{\listlen#1[]}',...
            '\pgfmathsetmacro{\n}{\listlen#3[]}',...
            '\pgfmathsetmacro{\vstart}{#3[1]-\mudistance*#4[1]+\mudistance};',...
            '\pgfmathsetmacro{\vstop}{#3[\n]};',...
            '\pgfmathsetmacro{\ustart}{#1[1]-\mudistance*#2[1]+\mudistance};',...
            '\pgfmathsetmacro{\ustop}{#1[\m]};',...
            '\foreach \i in {1,...,\m}{',...
            '	\pgfmathsetmacro{\uu}{#1[\i]};',...
            '	\pgfmathsetmacro{\mm}{#2[\i]};',...
            '	\plotuknot{\uu}{\vstart}{\vstop}{\mm}{\p-2};',...
            '}',...
            '\foreach \i in {1,...,\n}{',...
            '	\pgfmathsetmacro{\vv}{#3[\i]};',...
            '	\pgfmathsetmacro{\nn}{#4[\i]};',...
            '	\plotvknot{\vv}{\ustart}{\ustop}{\nn}{\q-2};',...
            '}',...
            '}');
        fclose(fileID);
    end
end

% write data to .dat file
function write_data_to_texfile(fileID, lrsplinesurface)

    % initialize
    p     = lrsplinesurface.p;
    kts   = lrsplinesurface.knots;
    cp    = lrsplinesurface.cp';
    elements = lrsplinesurface.elements;
    support  = lrsplinesurface.support;

    m = size(p,1);      % number of elements
    n = size(cp,1);     % number of basis functions
    
    % determine size of the supports
    d = zeros(n,1);
    for k=1:n
        s = kts{k,1}(end)-kts{k,1}(1);
        t = kts{k,2}(end)-kts{k,2}(1);
        d(k) = s * t;
    end
    [~,I] = sort(d,'descend'); [~,J] = sort(I);
    
    % print list of degrees
    fprintf(fileID,'%s\n%s\n',...
        '\setsepchar{,}',...
        '\readlist\degree{');
    for k=1:m
        fprintf(fileID,'%d,',p(k,1));
    end
    fprintf(fileID,'}\n\n');
    
    % print list of elements
    A = elements(1,1:2); B = elements(1,1:2);
    fprintf(fileID,'%s\n%s\n',...
        '\setsepchar[ ]{/ ;}',...
        '\readlist\element{');
    for k=1:m
        a = elements(k,1:2);            % lower-left corner
        b = elements(k,3:4);            % upper-right corner
        
        if (a(1)<A(1)), A(1) = a(1); end 
        if (a(2)<A(2)), A(2) = a(2); end
        if (B(1)<b(1)), B(1) = b(1); end 
        if (B(2)<b(2)), B(2) = b(2); end
        
        fprintf(fileID,'%s%s%s%s',Coord(a), ';', Coord(b),'/');
    end
    fprintf(fileID,'}\n\n');
    
    fprintf(fileID,'%s\n','% Domain min and max coordinates');
    fprintf(fileID,'%s%0.6f%s\n%s%0.6f%s\n%s%0.6f%s\n%s%0.6f%s\n\n',...
        '\def\aX{',A(1),'}',...
        '\def\aY{',A(2),'}',...
        '\def\bX{',B(1),'}',...
        '\def\bY{',B(2),'}');
    
    fprintf(fileID,'%s\n%s%0.6f%s\n',...
        '\newlength{\sizeX}',...
        '\setlength{\sizeX}{',B(1)-A(1),'cm}');
    fprintf(fileID,'%s\n%s%0.6f%s\n\n',...
        '\newlength{\sizeY}',...
        '\setlength{\sizeY}{',B(2)-A(2),'cm}');
    
    % print the supports
    fprintf(fileID,'%s\n%s\n',...
        '\setsepchar[ ]{; ,}',...
        '\readlist\support{');
    for k=1:m
        s = J(support{k});
        supp = strcat(sprintf('%d,', s(1:end-1)), num2str(s(end)));
        fprintf(fileID,'%s;',supp);
    end
    fprintf(fileID,'}\n\n');
    
    % print the controlpoints
    fprintf(fileID,'%s\n%s',...
        '\setsepchar{;}',...
        '\readlist\grevillepoint{');
    for k=1:n
        K = I(k);
        u = kts{K,1}; v = kts{K,2};
        c = [mean(u(2:end-1)); mean(v(2:end-1))];      % center
        fprintf(fileID,'%s;', Coord(c));
    end
    fprintf(fileID,'}\n\n');

    % print the local knot vectors
    fprintf(fileID,'%s\n%s\n',...
        '\setsepchar[ ]{/ ; ,}',...
        '\readlist\uknots{');
    for k=1:n
        K = I(k);
        [u, ia, ic] = unique(kts{K,1});
        
        V = strcat(sprintf('%0.6f,' , u(1:end-1)), num2str(u(end)));
        M = strcat(sprintf('%d,' , diff(ia)), num2str(length(ic)-ia(end)+1));
        fprintf(fileID,'%s;%s/', V, M);
    end
    fprintf(fileID,'}\n\n');

    fprintf(fileID,'%s\n%s\n',...
        '\setsepchar[ ]{/ ; ,}',...
        '\readlist\vknots{');
    for k=1:n
        K = I(k);
        [v, ia, ic] = unique(kts{K,2});
        V = strcat(sprintf('%0.6f,' , v(1:end-1)), num2str(v(end)));
        M = strcat(sprintf('%d,' , diff(ia)), num2str(length(ic)-ia(end)+1));
        fprintf(fileID,'%s;%s/', V, M);
    end
    fprintf(fileID,'}\n\n\n');

end


% function compute_continuity_across_mesh_edges(lrsplinesurface)
%     
%     initialize
%     p     = lrsplinesurface.p;
%     kts   = lrsplinesurface.knots;
%     cp    = lrsplinesurface.cp';
%     elements = lrsplinesurface.elements;
%     support  = lrsplinesurface.support;
% 
%     loop over elements
%     for k=1:length(support)
%         function_indices = support{k};
%         for i=1:length(function_indices)
%             fun = function_indices(i);
%             kts{fun,1}
%     end
% end


function write_userinput_to_tikzfile(fileID)

fprintf(fileID,'%s\n%s\n\n',...
    '% choose a color foreach polynomial degree, see https://en.wikibooks.org/wiki/LaTeX/Colors',...
    '\readlist\colorlist{yellow/orange/red/magenta/blue/cyan/green}');

% User defined styles
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n',...
    '% Define styles used to draw elements, control-points, etc.',...
    '\tikzset{',...
    '   % Define style used to draw elements',...
    '   element/.style={',...
    '       draw=black,',...
    '       draw opacity=0.5,',...
    '       line width=0.5,',...
    '       fill=\colorlist[#1],',...
    '       fill opacity=0.2,',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n',...
    '   % Define style used to draw element numbers',...
    '   enumber/.style 2 args={',...
    '       label={[black,opacity=0.5,scale=\tkzscale*0.03*#2]center:{\scriptsize #1}},',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n',...
    '   % Define style used to draw control points',...
    '   controlpoint/.style n args=3{',...
    '       draw,',...
    '       draw opacity=1,',...
    '       line width=(#1+#2)*0.1,',...
    '       ellipse,',...
    '       minimum width={#1 cm},',...
    '       minimum height={#2 cm},',...
    '       scale=\tkzscale*0.075,',...
    '       fill=\colorlist[#3],',...
    '       fill opacity=1,',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n',...
    '   % Define style used to draw control point numbers',...
    '   cpnumber/.style 2 args={',...
    '       label={[black, opacity=1, scale=1.2*#2]center:{\scriptsize #1}},',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n',...
    '   % Define style used to draw elements',...
    '   thiselement/.style={',...
    '       draw=black,',...
    '       draw opacity=1,',...
    '       line width=1,',...
    '       fill=\colorlist[#1],',...
    '       fill opacity=0.4,',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n',...
    '   % Define style used to draw element numbers',...
    '   thisenumber/.style 2 args={',...
    '       label={[black,opacity=1,scale=\tkzscale*0.03*#2]center:{\scriptsize #1}},',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n',...
    '   % Define style used to draw knot lines of individual basis functions.',...
    '   knotline/.style={',...
    '       draw=\colorlist[#1],',...
    '       draw opacity=1,',...
    '       line width=0.40,',...
    '   },');
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
    '   % Define style used to draw support of individual basis functions.',...
    '   support/.style={',...
    '       draw=\colorlist[#1],',...
    '       draw opacity=1,',...
    '       line width=0.0,',...
    '       fill=\colorlist[#1],',...
    '       fill opacity=0.5,',...
    '   },',...
    '}');

% Distance between knot lines with multiplicity
fprintf(fileID,'%s\n%s\n\n',...
    '% Choose distance between knotlines with multiplicity',...
    '\def\mudistance{0.005}');
end

% write drawing of elements, controlpoints, knot-lines, etc
function write_drawing_to_tikzfile(fileID, lrsplinesurface)

% initialize
m = size(lrsplinesurface.p,1);      % number of elements
n = size(lrsplinesurface.cp,2);     % number of basis functions
o = size(lrsplinesurface.lines,1);  % number of knot lines 

fprintf(fileID,'%s\n\n','%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PARAMETERS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');

fprintf(fileID,'%s\n%s%d%s\n%s%d%s\n%s%d%s\n\n',...
    '% global number of elements, control points and knot lines',...
    '\def\nelms{',m,'}          % global number of elements',...
    '\def\nknotlines{',o,'}     % global number of knot lines',...
    '\def\ndofs{',n,'}          % global number of degrees of freedom');


fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n\n',...
    '% Choose elements, knot-lines, control-points, etc to draw',...
    '\def\elemlist{1,...,\nelms}            % elements to colorcode',...
    '\def\knotlinelist{1,...,\nknotlines}   % knot lines to draw separately',...
    '\def\doflist{1,...,\ndofs}             % degrees of freedom to draw',...
    '\def\localelemlist{1,...,1}            % separate elements to draw with active degrees of freedom',...
    '\def\supportlist{1,...,1}              % draw support of individual basis functions',...    
    '\def\localknotlinelist{1,...,1}        % separate knot lines corresponding to individual functions to draw with multiplicity');


fprintf(fileID,'%s\n\n','%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DRAWING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');

fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
    '% Draw the elements',...
    '\foreach \i in \elemlist{',...
 	'   \itemtomacro\element[\i,1]\A',...
	'   \itemtomacro\element[\i,2]\B',...
    '   \itemtomacro\degree[\i]\I',...
	'   \draw let',...
  	'       \p1 = \A,',...
  	'       \p2 = \B,',...
  	'       \n1 = {veclen((\x2-\x1),(\y2-\y1))}',...
	'   in [ element=\I ] \A rectangle node [ enumber={\i}{\n1} ] {} \B;',...
    '}');

% plot knot lines of individual basis functions
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
    '% Draw the knotlines of a particular basis function',...
    '\foreach \k in \localknotlinelist{',...
    '    \setsepchar{,}',...
    '    \itemtolist{\uknots[\k,1]}{\u}',...
    '    \itemtolist{\uknots[\k,2]}{\mu}',...
    '    \itemtolist{\vknots[\k,1]}{\v}',...
    '    \itemtolist{\vknots[\k,2]}{\vu}',...
    '    \plotknotlines{\u}{\mu}{\v}{\vu}',...
    '}');

% plot supports of individual basis functions
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
    '% Draw the support and knotlines and control points of a particular basis function',...
    '\foreach \k in \supportlist{',...
    '    \setsepchar{,}',...
    '    \itemtolist{\uknots[\k,1]}{\u}',...
    '    \itemtolist{\uknots[\k,2]}{\mu}',...
    '    \itemtolist{\vknots[\k,1]}{\v}',...
    '    \itemtolist{\vknots[\k,2]}{\vu}',...
    '    \listsumtruncatemacro{\mu}{\p}',...
    '    \draw[support=\p-2] (\u[1],\v[1]) rectangle (\u[-1],\v[-1]);',...
    '    \plotknotlines{\u}{\mu}{\v}{\vu}',...
    '    \listdiffmacro{\u[1]}{\u[-1]}{\s}',...
    '    \listdiffmacro{\v[1]}{\v[-1]}{\t}',...
    '    \draw \grevillepoint[\k] node[inner sep=0cm, controlpoint={\s}{\t}{\p-2}, cpnumber={\k}{0.5*\s+0.5*\t}] {};',...
    '}');


fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n',...
    '% Draw the control-points',...
    '\foreach \k in \doflist{',...
    '    \listsumtruncatemacro{\uknots[\k,2]}{\p}',...
    '    \listdiffmacro{\uknots[\k,1,1]}{\uknots[\k,1,-1]}{\s}',...
    '    \listdiffmacro{\vknots[\k,1,1]}{\vknots[\k,1,-1]}{\t}',...
    '    \draw \grevillepoint[\k] node[inner sep=0cm, controlpoint={\s}{\t}{\p-2}, cpnumber={\k}{0.5*\s+0.5*\t}] {};',...
    '}');


% plot control-points associated with a particular element
fprintf(fileID,'%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n', ...
    '% Draw the control-points associated with a particular element,',...
    '\foreach \i in \localelemlist{',...
    '   \itemtomacro\element[\i,1]\A',...
    '   \itemtomacro\element[\i,2]\B',...
    '   \itemtomacro\degree[\i]\I',...
    '   \draw let',...
    '   \p1 = \A,',...
    '   \p2 = \B,',...
    '   \n1 = {veclen((\x2-\x1),(\y2-\y1))}',...
    '   in [thiselement=\I] \A rectangle node[ thisenumber={\i}{\n1} ] {} \B;',...
    '   \foreachitem \k \in \support[\i]{',...
    '       \listsumtruncatemacro{\uknots[\k,2]}{\p}',...
    '       \listdiffmacro{\uknots[\k,1,1]}{\uknots[\k,1,-1]}{\s}',...
    '       \listdiffmacro{\vknots[\k,1,1]}{\vknots[\k,1,-1]}{\t}',...
    '       \draw \grevillepoint[\k] node[inner sep=0cm, controlpoint={\s}{\t}{\p-2}, cpnumber={\k}{0.5*\s+0.5*\t}] {};',...
    '   }',...
    '}');

end


%%%%%%%%%%%%%%%%%%%%%%%%%%% \tikz helper functions %%%%%%%%%%%%%%%%%%%%%

% print a tikz coordinate
function coordinate = Coord(p)
    coordinate = sprintf('%s %f %s %f %s', '(', p(1), ',', p(2), ')');
end